// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String  @id @default(uuid())
  email             String  @unique
  name              String?
  image             String?
  apiKey            String? @unique
  weeklyGoalSeconds Int?

  emailVerified Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  projects Project[]

  stripeCustomerId String? @unique

  @@map("user")
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  devSessions DevSession[]

  categories Category[] @relation("ProjectCategories")

  technologies Technology[] @relation("ProjectTechnologies")

  @@unique([userId, name])
}

enum Categories {
  side_project
  client
  urgent
  indie
}

model Category {
  id       String     @id @default(uuid())
  name     Categories
  projects Project[]  @relation("ProjectCategories")
}

model Technology {
  id       String    @id @default(uuid())
  name     String    @unique
  projects Project[] @relation("ProjectTechnologies")
}

model DevSession {
  id        String    @id @default(uuid())
  startedAt DateTime
  endedAt   DateTime?
  duration  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  pauses Pause[]

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, startedAt])
}

model Pause {
  id        String    @id @default(uuid())
  startedAt DateTime
  endedAt   DateTime?
  duration  Int?

  sessionId String
  session   DevSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum SubscriptionPlan {
  pro_monthly
  pro_yearly
}

model Subscription {
  id                   String           @id @default(uuid())
  plan                 SubscriptionPlan
  referenceId          String // par d√©faut userId
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               String
  periodStart          DateTime?
  periodEnd            DateTime?
  cancelAtPeriodEnd    Boolean?
  seats                Int?
  trialStart           DateTime?
  trialEnd             DateTime?
}
